function [ntp,vid,aud,aud_data] = findGoProVidNTP(fname_gopro,ntp_pupil,aud_data_pupil,varargin)

%Finds offset between pupil and gopro audio streams and outputs ntp times
%for the gopro. ntp_pupil is generated by the findPupilVidNTP function.
%GoPro video segments need to be combined first using combineGoProVids.

% fname_pupil = "\\rolstonserver\D\Data\Real World Navigation Cory\RW2\Original\Walk1\Pupil\5d738720_0.0-1556.477.mp4";
% fname_gopro = "\\rolstonserver\D\Data\Real World Navigation Cory\RW2\Original\Walk1\Gopro\Gopro_RW2_Walk1_Combined.MP4";

ntp = []; vid = []; aud = []; aud_data = [];

disp('Loading audio streams...')
y = aud_data_pupil.y;
Fs = aud_data_pupil.Fs;

[aud_data.y,aud_data.Fs] = audioread(fname_gopro);
aud = audioplayer(aud_data.y,aud_data.Fs);

% if Fs~=aud_data.Fs
%     error('Sampling frequencies do not match');
% end

if Fs~=48000
    if aud_data.Fs~=48000
        error('Expected sampling frequency to be 48000');
    else
        disp('Resampling pupil audio to match 48kHz...')
        y = resample(y,48000,Fs);
        Fs = 48000;
    end
end

disp('Calculating xcorr...')
% [r,lags] = xcorr(y(:,1),aud_data.y(:,2),Fs*300); %limit to 300sec in both directions
% 
% rsmooth = resample(smoothdata(abs(r),'movmean',Fs*10),1,100);
% rlags = lags(1:100:end); %downsample to approx 500Hz

ysmooth = resample(smoothdata(abs(y),'movmean',Fs),1,100);
y2smooth = resample(smoothdata(abs(aud_data.y(:,1)),'movmean',Fs),1,100);

mlen = min(length(ysmooth),length(y2smooth));

[r,lags] = xcorr(ysmooth(1:mlen),y2smooth(1:mlen),(Fs/100)*300,'coeff');

rsmooth = smoothdata(r,'movmean',(Fs/100)*10);
rlags = lags;

[pks,locs,~,p] = findpeaks(rsmooth,rlags);
[~,sidx] = sort(p,'descend'); %sort by prominence
pk = pks(sidx(1)); %take largest prominence
loc = locs(sidx(1));

% [mval,midx] = max(rsmooth);

% gaussEqn = 'a*exp(-((x-b)/c)^2)+d';
% [f,g] = fit(rlags(:),rsmooth(:),gaussEqn,'start',[mval,rlags(midx),sum(rsmooth>(mval/2))*100,0]);

% figure; 
% plot(rlags,rsmooth); 
% hold on; 
% plot(f)
% title([g.rsquare,f.b/Fs])

% if g.rsquare>0.9
%     Offset_sec = f.b/Fs;
%     fprintf('Offset detected at %0.3f sec\n',Offset_sec)
% else
%     Offset_sec = 0;
%     disp('Offset not detected...')
% end

if p(sidx(1))>0.05
    Offset_sec = loc/(Fs/100);
    fprintf('Offset detected at %0.3f sec\n',Offset_sec)
else
    Offset_sec = 0;
    disp('Offset not detected...')
end

figure;
plot(rlags,rsmooth);
hold on;
plot(loc,pk,'*k')
title(Offset_sec)

% Loading video
disp('Loading video...')
vid = VideoReader(fname_gopro); 

ntp_first = ntp_pupil(1) + Offset_sec; %timestamp for 1st frame in sec
ntp_last = ntp_first + vid.Duration;

ntp = linspace(ntp_first,ntp_last,vid.NumFrames)';
ntp_diff = diff(ntp)-(1/vid.FrameRate);
if min(ntp_diff)<-0.0001 || max(ntp_diff)>0.0001 %if more than 1/10ms jitter, send alert
    mesg = 'NTP time vector has too much variance! Need to check...';
    if nargin>3
        uialert(varargin{1},mesg,'');
    end
    disp(mesg);
end



